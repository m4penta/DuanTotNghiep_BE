const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const userModel = require('../models/model.user');

class AuthController {
  async login(req, res) {  //x·ª≠ l√Ω vi·ªác ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p
    try {
      // tr√≠ch xu·∫•t email v√† password t·ª´ ph·∫ßn th√¢n c·ªßa y√™u c·∫ßu s·ª≠ d·ª•ng vi·ªác gi·∫£i n√©n (destructuring assignment)
      const { email, password } = req.body;
      //ki·ªÉm tra xem c·∫£ email v√† password c√≥ ƒë∆∞·ª£c cung c·∫•p trong y√™u c·∫ßu
      if (!(email && password)) { 
        return res
          .status(400)
          .json({ status: false, message: 'All input is required!' });
      }
      //t√¨m m·ªôt ng∆∞·ªùi d√πng v·ªõi ƒë·ªãa ch·ªâ email ƒë√£ cung c·∫•p
      const user = await userModel.findOne({ email }); 

      if (!user) { //N·∫øu kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ƒë·ªãa ch·ªâ email
        return res
          .status(400)
          .json({ status: false, message: 'Email is not existed!' });
      }
      // ti·∫øn h√†nh so s√°nh m·∫≠t kh·∫©u ƒë∆∞·ª£c cung c·∫•p v·ªõi m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ªØ s·ª≠ d·ª•ng bcrypt.compare
      if (user && (await bcrypt.compare(password, user.password))) {
        //t·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng userSign ch·ª©a m·ªôt s·ªë chi ti·∫øt v·ªÅ ng∆∞·ªùi d√πng
        const userSign = {
          _id: user._id,
          firstName: user.firstName,
          lastName: user.lastName,
          email: user.email,
          phone: user.phone,
          address: user.address,
          role: user.role,
          image: user.image,
          dayOfBirth: user.dayOfBirth,
          gender: user.gender,
        };
        console.log(
          'üöÄ ~ file: controller.user.js ~ line 34 ~ AuthController ~ login ~ userSign',
          userSign
        );
        // t·∫°o m·ªôt m√£ th√¥ng b√°o (token) s·ª≠ d·ª•ng ƒë·ªëi t∆∞·ª£ng userSign, 
        // m·ªôt kh√≥a b√≠ m·∫≠t t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (TOKEN_KEY), v√† th·ªùi gian h·∫øt h·∫°n sau 2 gi·ªù.
        const token = jwt.sign(userSign, process.env.TOKEN_KEY, {
          expiresIn: '2h',
        });
        console.log(
          'üöÄ ~ file: controller.user.js ~ line 37 ~ AuthController ~ login ~ token',
          token
        );
        return res.status(200).json({ token });
      }
      res.status(400).json({ status: false, message: 'Invalid Credentials' });
    } catch (error) {
      return res.status(400).json({ status: false, error });
    }
  }
  async register(req, res) {
    try {
      //tr√≠ch xu·∫•t th√¥ng tin ng∆∞·ªùi d√πng t·ª´ ph·∫ßn th√¢n c·ªßa y√™u c·∫ßu
      const { firstName, lastName, email, password, role, image } = req.body;

      // b·∫•t k·ª≥ tr∆∞·ªùng th√¥ng tin n√†o b·ªã thi·∫øu (null ho·∫∑c kh√¥ng t·ªìn t·∫°i),
      // m·ªôt ph·∫£n h·ªìi l·ªói 400 Bad Request s·∫Ω ƒë∆∞·ª£c tr·∫£ v·ªÅ, cho bi·∫øt c·∫ßn ph·∫£i nh·∫≠p ƒë·ªß th√¥ng tin.
      if (!(firstName && lastName && email && password && role && image)) {
        return res.status(400).json({ message: 'All input is required!' });
      }

      //ki·ªÉm tra xem ng∆∞·ªùi d√πng v·ªõi ƒë·ªãa ch·ªâ email ƒë√£ cung c·∫•p ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existUser = await userModel.findOne({ email });
      if (existUser) {
        return res.status(400).json({ message: 'User email already exist!' });
      }

      // m√£ s·ª≠ d·ª•ng bcrypt.hash ƒë·ªÉ m√£ h√≥a m·∫≠t kh·∫©u m·ªõi c·ªßa ng∆∞·ªùi d√πng v·ªõi m·ª©c ƒë·ªô an to√†n l√† 10 
      // (c√≥ nghƒ©a l√† th·ªùi gian m√£ h√≥a m·∫≠t kh·∫©u s·∫Ω m·∫•t kho·∫£ng 2^10 l·∫ßn so v·ªõi m·∫≠t kh·∫©u g·ªëc).
      const encryptedPassword = await bcrypt.hash(password, 10);

      //t·∫°o m·ªôt ng∆∞·ªùi d√πng m·ªõi trong c∆° s·ªü d·ªØ li·ªáu
      const user = await userModel.create({
        firstName,
        lastName,
        email,
        password: encryptedPassword,
        role,
        image,
      });
      //m√£ t·∫°o m·ªôt m√£ th√¥ng b√°o (token) JSON Web Token (JWT) b·∫±ng c√°ch s·ª≠ d·ª•ng th√¥ng tin c·ªßa ng∆∞·ªùi d√πng
      const token = jwt.sign(
        {
          user_id: user._id,
          firstName,
          lastName,
          email,
          role,
          image,
        },
        process.env.TOKEN_KEY,
        { expiresIn: '2h' }
      );
      user.token = token;
      return res.status(200).json({ status: true, user });
    } catch (error) {
      return res.status(400).json({ status: false, error });
    }
  }
  // Admin
  async userGetList(req, res) {
    try {
      const users = await userModel.find().select('-password');
      return res
        .status(200)
        .render('template/user/list', { message: '', users });
    } catch (error) {
      return res.status(400).redirect('/');
    }
  }
  // async userAuthorize(req, res) {
  //   const { id } = req.params;
  //   if (id) {
  //     try {
  //       await userModel.update({ _id: id }, { role: 'admin' });
  //       res.status(300).redirect('/user-manager/list');
  //     } catch (error) {
  //       res.status(300).redirect('/user-manager/list');
  //     }
  //   }
  // }
  async userAuthorize(req, res) {
    const { id } = req.params;
    if (id) {
      try {
        await userModel.updateOne({ _id: id }, { role: 'admin' });
        res.status(300).redirect('/user-manager/list');
      } catch (error) {
        res.status(300).redirect('/user-manager/list');
      }
    }
  }
  // async userUnAuthorize(req, res) {
  //   const { id } = req.params;
  //   if (id) {
  //     try {
  //       await userModel.update({ _id: id }, { role: 'user' });
  //       res.status(300).redirect('/user-manager/list');
  //     } catch (error) {
  //       res.status(300).redirect('/user-manager/list');
  //     }
  //   }
  // }

  async userUnAuthorize(req, res) {
    const { id } = req.params;
    if (id) {
      try {
        await userModel.updateOne({ _id: id }, { role: 'user' });
        res.status(300).redirect('/user-manager/list');
      } catch (error) {
        res.status(300).redirect('/user-manager/list');
      }
    }
  }
  //[get] /user/:id/edit
  async userGetByid(req, res) {
    try {
      const users = await userModel.findById(req.params.id).select('-password');
      return res.status(200).json(users);
    } catch (error) {
      return res.status(400).json({ message: 'Error getting user' });
    }
  }
  //[get] /user/allUser
  // users get edit deltail by themserft
  async apiUserPostEdit(req, res) {
    try {
      const { email, password } = req.body;
      if (!(email && password)) {
        return res
          .status(400)
          .json({ status: false, message: 'All input is required!' });
      }

      const user = await userModel.findOne({ email });

      if (!user) {
        return res
          .status(400)
          .json({ status: false, message: 'Email is not existed!' });
      }
      if (user && (await bcrypt.compare(password, user.password))) {
        const userSign = {
          _id: user._id,
          firstName: user.firstName,
          lastName: user.lastName,
          email: user.email,
          phone: user.phone,
          address: user.address,
          role: user.role,
          image: user.image,
          dayOfBirth: user.dayOfBirth,
          gender: user.gender,
        };
        console.log(
          'üöÄ ~ file: controller.user.js ~ line 34 ~ AuthController ~ login ~ userSign',
          userSign
        );
        const token = jwt.sign(userSign, process.env.TOKEN_KEY, {
          expiresIn: '2h',
        });
        console.log(
          'üöÄ ~ file: controller.user.js ~ line 37 ~ AuthController ~ login ~ token',
          token
        );
        return res.status(200).json({ token, userSign });
      }
      res.status(400).json({ status: false, message: 'Invalid Credentials' });
    } catch (error) {
      return res.status(400).json({ status: false, error });
    }
  }

  //[PUT] /users/:id/update
  // async userUpdate(req, res, next) {
  //   try {
  //     await userModel.updateOne({ _id: req.params.id }, req.body);
  //     return res.status(200).json({ message: 'User updated successfully' });
  //   } catch (error) {
  //     return res.status(400).json({ message: 'Error updating user' });
  //   }
  // }
  // async userGetUpdate(req, res, next) {
  //   try {
  //     const updatedUser = await userModel.findByIdAndUpdate(
  //       { _id: req.params.id },
  //       req.body,
  //       { new: true }
  //     );
  //     if (!updatedUser) {
  //       return res.status(404).json({ message: 'User not found' });
  //     }
  //     res.json(updatedUser);
  //   } catch (error) {
  //     next(error);
  //   }
  // }

  async updateUserById(req, res, next) {
    try {
      const userId = req.params.id;
      const updatedData = req.body;
      const updatedUser = await userModel.findByIdAndUpdate(
        userId,
        updatedData,
        { new: true }
      );
      console.log(updatedUser);
      if (!updatedUser) {
        return res.status(404).json({ message: 'User not found' });
      }
      res.json(updatedUser);
    } catch (error) {
      next(error);
    }
  }
  async getUserInfo(req, res) {
    try {
      console.log(req.headers);
      if (req.headers['authorization']) {
        const userToken = req.headers['authorization'].split(' ')[1];
        const { _id: userId } = jwt.decode(userToken);
        console.log({ userId });
        const userData = await userModel.findById(userId);
        res.status(200).json(userData);
      }
    } catch (error) {
      console.log(error);
      res.status(500).end();
    }
  }
}

module.exports = new AuthController();
